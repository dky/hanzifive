"use strict";(()=>{var e={};e.id=317,e.ids=[317],e.modules={846:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},1421:e=>{e.exports=require("node:child_process")},1455:e=>{e.exports=require("node:fs/promises")},1708:e=>{e.exports=require("node:process")},3024:e=>{e.exports=require("node:fs")},3033:e=>{e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},3873:e=>{e.exports=require("path")},4870:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6698:e=>{e.exports=require("node:async_hooks")},6760:e=>{e.exports=require("node:path")},7066:e=>{e.exports=require("node:tty")},7598:e=>{e.exports=require("node:crypto")},7975:e=>{e.exports=require("node:util")},8161:e=>{e.exports=require("node:os")},8474:e=>{e.exports=require("node:events")},9021:e=>{e.exports=require("fs")},9294:e=>{e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},9621:(e,r,t)=>{t.r(r),t.d(r,{patchFetch:()=>m,routeModule:()=>g,serverHooks:()=>x,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>h});var s={};t.r(s),t.d(s,{DELETE:()=>p,GET:()=>l,PUT:()=>u});var a=t(6559),o=t(8088),n=t(7719),i=t(2190),d=t(5069);async function l(e,{params:r}){let{id:t}=await r;try{let e=await d.db.flashcard.findUnique({where:{id:t},include:{tags:!0}});if(!e)return i.NextResponse.json({message:"Flashcard not found"},{status:404});let r={...e,tags:e.tags.map(e=>e.name)};return i.NextResponse.json(r)}catch(e){return console.error(`Error fetching flashcard ${t}:`,e),i.NextResponse.json({message:"Failed to fetch flashcard"},{status:500})}}async function c(e,r=3){let t;for(let s=1;s<=r;s++)try{return await e()}catch(e){console.error(`Attempt ${s} failed:`,e),t=e,s<r&&await new Promise(e=>setTimeout(e,200*s))}throw t}async function u(e,{params:r}){let{id:t}=await r;try{let r=await e.json(),{character:s,pinyin:a,meaning:o,tags:n}=r;console.log(`PUT /api/flashcards/${t} - Request body:`,JSON.stringify(r,null,2));let l=await c(()=>d.db.flashcard.findUnique({where:{id:t},include:{tags:!0}}));if(!l)return i.NextResponse.json({message:"Flashcard not found"},{status:404});console.log("Existing flashcard tags:",l.tags.map(e=>e.name)),console.log("Input tags value (type):",typeof n,Array.isArray(n)?"array":"not array"),console.log("Input tags value:",n);let u={};void 0!==s&&(u.character=s),void 0!==a&&(u.pinyin=a),void 0!==o&&(u.meaning=o);try{let e;if(Object.keys(u).length>0?(console.log("Updating flashcard fields:",u),e=await c(()=>d.db.flashcard.update({where:{id:t},data:u,include:{tags:!0}})),console.log("Updated flashcard fields successfully")):e=l,void 0!==n){let r=[];"string"==typeof n?r=""===n.trim()?[]:n.split(",").map(e=>e.trim()).filter(e=>e.length>0):Array.isArray(n)&&(r=n.map(e=>e.trim()).filter(e=>e.length>0)),console.log("Processed tag names for update:",r);try{if(console.log("Disconnecting existing tags"),await c(()=>d.db.flashcard.update({where:{id:t},data:{tags:{set:[]}}})),console.log("Successfully disconnected existing tags"),r.length>0){for(let e of(console.log("Connecting new tags:",r),r))try{let r=await c(()=>d.db.tag.findUnique({where:{name:e}}));r||(console.log(`Creating new tag: ${e}`),r=await c(()=>d.db.tag.create({data:{name:e}}))),console.log(`Connecting tag: ${e} (ID: ${r.id})`),await c(()=>d.db.flashcard.update({where:{id:t},data:{tags:{connect:{id:r.id}}}}))}catch(r){console.error(`Error processing tag "${e}":`,r)}e=await c(()=>d.db.flashcard.findUnique({where:{id:t},include:{tags:!0}}))}}catch(e){return console.error("Error during tag update operations:",e),i.NextResponse.json({message:`Error during tag operations: ${e instanceof Error?e.message:"Unknown error"}`},{status:500})}}let r=e?{...e,tags:e.tags.map(e=>e.name)}:{id:t,tags:[]};return console.log("Returning updated flashcard with tags:",r.tags),i.NextResponse.json(r)}catch(e){return console.error("Database error:",e),i.NextResponse.json({message:`Database error: ${e instanceof Error?e.message:"Unknown error"}`},{status:500})}}catch(r){console.error(`Error updating flashcard ${t}:`,r);let e="Failed to update flashcard";return r instanceof Error&&(e+=`: ${r.message}`),i.NextResponse.json({message:e},{status:500})}}async function p(e,{params:r}){let{id:t}=await r;try{if(!await d.db.flashcard.findUnique({where:{id:t}}))return i.NextResponse.json({message:"Flashcard not found"},{status:404});return await d.db.flashcard.delete({where:{id:t}}),i.NextResponse.json({message:"Flashcard deleted successfully"})}catch(e){return console.error(`Error deleting flashcard ${t}:`,e),i.NextResponse.json({message:"Failed to delete flashcard"},{status:500})}}let g=new a.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/flashcards/[id]/route",pathname:"/api/flashcards/[id]",filename:"route",bundlePath:"app/api/flashcards/[id]/route"},resolvedPagePath:"/Users/evangelosmeklis/hanzifive/src/app/api/flashcards/[id]/route.ts",nextConfigOutput:"standalone",userland:s}),{workAsyncStorage:f,workUnitAsyncStorage:h,serverHooks:x}=g;function m(){return(0,n.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:h})}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[447,580,33],()=>t(9621));module.exports=s})();